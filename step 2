리팩토링을 해야할 경우는 다음과 같다.

1. 처음에는 그냥 한다.
2. 비슷한 일을 두번째로 하게되면(중복이 생겼다는 뜻), 일단 계속 진행한다.
3. 비슷한 일을 세 번째 하게 되면 리펙토링을 한다.

리팩토링의 장점은 다음과 같다.
1. 리팩토링을 하면 코드 개발 속도가 높아진다.
2. 소프트웨어를 이해하기 쉬워진다.
3. 버그를 쉽게 찾을 수 있다.
4. 코드의 설계가 좋아진다.

리팩토링을 할 때 가장 중요한 것은 동작하는 기능들을 작은 단계들로 쪼게어 순차적으로 연결하여 만들어내는 일이다.
또한 리팩토링을 진행할 때, 버그가 발견이 되어도 그대로 냅둔다.
그 이유는 버그를 고치면서 리팩토링을 하다보면 코드가 잘못될 수 있기 때문이다.
따라서 리팩토링이 끝나고 난 후 해당 버그를 처리하도록 해야한다.

트렁크 베이스드 방식은 코드가 마스터에 섞이지 않고, 기능이 추가될 때마다 버전을 명확히 나눌 수 있고 기능에 문제가 생기면 이전 상태로
쉽게 되돌릴 수 있어서 좋다.
하지만 독립 브랜치로 작업하는 기간이 길어질수록 작업 결과를 마스터로 통합하기가 어려워진다.
이 고통을 줄이고자 많은 이들이 마스터를 개인 브랜치로 수시로 리베이스 하거나 머지한다. 
하지만 여러 기능 브랜치에서 동시에 개발이 진행될 때는 이런식으로 해결할 수 없다.
