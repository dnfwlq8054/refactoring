<h1> 코드에서 나는 악취!! </h1>

<h2> 이름 짓기 </h2>
코드를 명료하게 표현하는 데 가장 중요한 요소중 하나는 바로 "이름" 이다.
그래서 함수, 모듈, 변수, 클래스 등은 그 이름만 보고도 각각이 무슨 일을 하고 어떻게 사용하는지 명확히 알 수 있도록 해야 한다.

만약 마땅히 이름이 떠오르지 않는다면 설계에 더 근본적인 문제가 숨어 있을 가능성이 매우 높다.

<h2> 중복 코드 </h2>
똑같은 코드 구조가 여러곳에서 반복 된다면 하나로 통합하여 더 나은 프로그램을 만들 수 있다.

단, 중복되는 코드를 볼 때 서로 차이점이 없는지 유심히 살펴봐야 한다.

1. 두 메서드가 동일한 표현식을 사용한다면 (함수 추출)하기 사용하기.
2. 비슷한데 완전히 같지 않다면 (문장 슬라이드) 하기.
3. 같은 부모로부터 파생된 서브 클래스들에 코드가 중복되어 있다면 (메서드 올리기)를 사용하기.

<h2> 긴 함수 </h2>
간접 호출의 효과, 즉 코드를 이해하고, 공유하고, 선택하기 쉬워진다는 장점은 함수를 짧게 구성할 때 나오는 것이다.

물론 코드를 읽는 사람 입장에서는 함수가 하는 일을 파악하기 위해 왔다 갔다 해야 하므로 여전히 부담이 된다.

코드에서 주석을 달아야 할 만한 부분은 무조건 함수로 만든다. 함수 이름은 동작 방식이 아닌 의도가 드러나게 짓는다.

즉, 함수이름에는 "목적"이 드러나야 한다. '무엇을 하는지'를 코드가 잘 설명해주지 못할수록 함수로 만드는게 유리하다.

코드가 단 한줄이어도 따로 설명할 필요가 있다면 함수로 추출하는게 좋다.

<h2> 긴 매개변수 목록 </h2>
매개 변수를 많이 받는 함수가 있을 수 있다.

이럴 때에는 다음과 같은 방법을 사용할 수 있다.
1. 매개변수를 질의 함수로 바꾸기
2. 객체 통째로 넘기기
3. 매개변수 객체 만들기
4. 플래그 인수 제거하기

클래스는 매개변수 목록을 줄이는 데 효과적인 수단이기도 하다.

<h1> 전역 데이터 </h1>
전역 데이터는 코드베이스 어디에서든 건드릴 수 있고 값을 누가 바꿧는지 찾아낼 메커니즘이 없다는 게 문제다.

이를 방지하기 위해 우리가 사용하는 대표적인 리팩터링은 변수 캡슐화하기다.

함수들을 클래스나 모듈에 집어넣고 그 안에섬나 사용할 수 있도록 접근 범위를 최소로 줄이는 것이 좋다.

<h2> 가변 데이터 </h2>
데이터를 변경했더니 예상치 못한 결과나 골치 앞느 버그로 이어지는 경우가 종종 있다.
이런 이유로 함수형 프로그래밍에서는 데이터는 절대 변하지 않고, 
데이터를 변경하려면 반드시 변경하려는 값에 해당하는 복사본을 만들어서 반환한다는 개념을 기본으로 삼고있다.(reduce, assign 등...)

가변 데이터를 처리하는 방법은 여러가지가 있다.
1. 변수 캡슐화 하기 : 정해놓은 함수를 거쳐야만 값을 수정할 수 있도록 감시하기.
2. 변수 쪼개기 : 하나의 변수에 용도가 다른 값들을 저장하느라 값을 갱신하는 경우
3. 문장 슬라이드하기와 함수 추출하기 : 값을 갱신하는 코드는 다른 코드들로부터 떨어뜨려 놓는 것이 좋다.
4. 질의 함수와 변경 함수 분리하기 : API를 만들 때 꼭 필요한 경우가 아니라면 부작용 있는 코드를 호출할 수 없게 막는다.
5. 세터 제거하기
6. 여러 함수를 클래스나 변환 함수로 묶기 : 변수를 갱신하는 코드들의 유효범위를 클래스나 변환으로 제안한다.
7. 참조를 값으로 바꾸기 : 내부 필드에 데이터를 담고 있는 변수를 수정하려면, 구조체를 새로 만드는 것이 좋다.

<h2> 뒤엉킨 변경 </h2>
뒤엉킨 변경은 단일 책임 원칙(SRP)이 제대로 지켜지지 않을 때 나타난다.

예컨대 지원해야 할 데이터 베이스가 추가될 때마다 함수 세 개를 바꿔야 하고, 금융 상품이 추가될 때마다 또 다른 함수 네 개를 바꿔야 하는 모듈 등이다.

이럴때는 단계 쪼개기, 함수 옮기기, 함수 추출하기, 클래스 추출하기 등을 사용한다.

<h2> 산탄총 수술 </h2>
산탄총 수술은 코드를 변경할 대마다 자잘하게 수정해야 하는 클래스가 많을 때를 가르킨다.

이럴때는 함수 옮기기와 필드 옮기기, 여러 함수를 클래스로 묶기, 여러 함수를 변환 함수로 묶기, 단계 쪼개기를 적용한다.

<h2> 기능 편애 </h2>
기능 편애는 흔히 어떤 함수가 자기가 속한 모듈의 함수나 데이터보다 다른 모듈의 함수나 데이터보다 다른 모듈의 함수나 데이터와 상호작용할 일이 더 많을 때 풍기는 냄새다.

프로그램을 모듈화할 때는 코드를 여러 영역을 나눈 뒤 영역 안에서 이뤄지는 상호작용은 최대한 늘리고 영역 사이에서 이뤄지는 상호작용은 최소로 줄이는데 주력한다.

이를 해결하는 좋은 디자인 패턴은 전략 패턴, 방문자 패턴이 있다.
